(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./example/introduction.mdx":function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return b}));var n=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),l={},o="wrapper";function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)(o,Object.assign({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"react-tiny-mobx-form"},"React Tiny MobX Form"),Object(i.b)("h2",{id:""},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"https://coveralls.io/github/dericgw/tiny-mobx-form?branch=master"}),Object(i.b)("img",{alt:"Coverage Status",src:"https://coveralls.io/repos/github/dericgw/tiny-mobx-form/badge.svg?branch=master"}))),Object(i.b)("p",null,"\u270c\ufe0fTiny (~2KB) tree-shakable MobX form library"),Object(i.b)("h2",{id:"features"},"Features"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Small, less than 2KB and tree-shakable"),Object(i.b)("li",{parentName:"ul"},"Written in TypeScript using MobX"),Object(i.b)("li",{parentName:"ul"},"Includes popular validations"),Object(i.b)("li",{parentName:"ul"},"Can add your own custom validations if needed")),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"npm i tiny-mobx-form")," or ",Object(i.b)("inlineCode",{parentName:"p"},"yarn add tiny-mobx-form")),Object(i.b)("h2",{id:"validation"},"Validation"),Object(i.b)("p",null,"Tiny MobX Form has the most common validations built in and also allows custom validations to be\nadded."),Object(i.b)("h3",{id:"validators"},"Validators"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"required - ",Object(i.b)("inlineCode",{parentName:"li"},"required")),Object(i.b)("li",{parentName:"ul"},"required if - ",Object(i.b)("inlineCode",{parentName:"li"},"required-if:<name of field>")," | ",Object(i.b)("inlineCode",{parentName:"li"},"required-if:last-name")),Object(i.b)("li",{parentName:"ul"},"length (string length) - ",Object(i.b)("inlineCode",{parentName:"li"},"length:<min>,<max>")," | ",Object(i.b)("inlineCode",{parentName:"li"},"length:4,30")),Object(i.b)("li",{parentName:"ul"},"match - ",Object(i.b)("inlineCode",{parentName:"li"},"match:<name of field>")," | ",Object(i.b)("inlineCode",{parentName:"li"},"match:password")),Object(i.b)("li",{parentName:"ul"},"letters - ",Object(i.b)("inlineCode",{parentName:"li"},"letters")),Object(i.b)("li",{parentName:"ul"},"email - ",Object(i.b)("inlineCode",{parentName:"li"},"email")),Object(i.b)("li",{parentName:"ul"},"phone number - ",Object(i.b)("inlineCode",{parentName:"li"},"phone")),Object(i.b)("li",{parentName:"ul"},"postal - ",Object(i.b)("inlineCode",{parentName:"li"},"postal")),Object(i.b)("li",{parentName:"ul"},"number - ",Object(i.b)("inlineCode",{parentName:"li"},"number")),Object(i.b)("li",{parentName:"ul"},"alphanumeric - ",Object(i.b)("inlineCode",{parentName:"li"},"alpha")),Object(i.b)("li",{parentName:"ul"},"size (number between) - ",Object(i.b)("inlineCode",{parentName:"li"},"size:<min>,<max>")," | ",Object(i.b)("inlineCode",{parentName:"li"},"size:50,100")),Object(i.b)("li",{parentName:"ul"},"one of (array list) - ",Object(i.b)("inlineCode",{parentName:"li"},"one-of:<comma separated list>")," | ",Object(i.b)("inlineCode",{parentName:"li"},"one-of:red,blue,green"))),Object(i.b)("h3",{id:"custom-validators"},"Custom Validators"),Object(i.b)("p",null,"If you would like to add your own custom validators, then you can pass those to the ",Object(i.b)("inlineCode",{parentName:"p"},"options")," argument\nof the ",Object(i.b)("inlineCode",{parentName:"p"},"Form")," constructor. You would pass them in as an object. The object key is the name of the\nvalidator and the value is the validator:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const additionalValidators = {\n  'file-size': fileSizeValidator,\n};\n")),Object(i.b)("p",null,"As an example, say we want to get the file size of a value and we want our validation to look like\nthis: ",Object(i.b)("inlineCode",{parentName:"p"},"file-size:2")," (that is 2KB). The validator would look like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"// The field is passed in so you can get any of its properties. \n// The other arguments are spread into the validator\nconst fileSizeValidator = (field, max) => {\n  if (!!field.value && field.value.size > max * 1024 /* 1,024 bytes in a KB */) {\n    return `The file size is too larger than ${max}KB`;\n  }\n  return undefined;\n}\n")),Object(i.b)("p",null,"Or, say we wanted a range for our file size that would look like this ",Object(i.b)("inlineCode",{parentName:"p"},"file-size:1,4"),". Then our\nvalidator would look like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const fileSizeValidator = (field, min, max) => {\n  if (!!field.value && (field.value.size < min * 1024 || field.value.size > max * 1024)) {\n    return `The file size must be between ${min}KB and ${max}KB`;\n  }\n  return undefined;\n}\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"example/introduction.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=example-introduction.fb1f3b7183be57092f21.js.map