{"version":3,"sources":["/Users/deric/Code/tiny-mobx-form/dist/index.js","/Users/deric/Code/src/validators/validations.ts","/Users/deric/Code/src/validators/index.ts","/Users/deric/Code/src/field.ts","/Users/deric/Code/src/form.ts","/Users/deric/Code/tiny-mobx-form/example/components/instant-validation.js","/Users/deric/Code/tiny-mobx-form/example/components/onblur-validation.js","/Users/deric/Code/tiny-mobx-form/example/introduction.mdx"],"names":["module","exports","require","error","isError","message","required","field","value","requiredIf","dependentFieldName","form","fields","label","length","min","max","Infinity","Number","toString","match","matchingFieldName","LETTERS","letters","test","EMAIL","email","PHONE_NUMBER","phone","POSTAL","postal","NUMBER","number","ALPHA","alpha","size","oneOf","pool","includes","join","validators","additionalValidators","Field","e","name","placeholder","validation","initialValue","_value","reset","this","isTouched","errors","split","map","validator","argument","args","Error","filter","Boolean","__decorate","observable","computed","action","Form","initialValues","forEach","props","_this","fieldNames","push","newProps","showErrors","_this2","t","_this3","_this4","isValid","flatMap","_this5","some","_this6","isDirty","reduce","dataset","_this7","struct","observer","TextInputField","type","firstName","validationMessage","hasErrors","isInvalid","onChange","currentTarget","lastName","age","useState","blurredFields","setBlurredFields","onBlur","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","alt","src","__position","__code","__scope","Playground","InstantValidation","OnblurValidation","__codesandbox","isMDXComponent"],"mappings":"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","file":"static/js/example-introduction.9807f2aa.js","sourcesContent":["\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./tiny-mobx-form.cjs.production.min.js')\n} else {\n  module.exports = require('./tiny-mobx-form.cjs.development.js')\n}\n","import { IField, Validator } from '../types';\n\ninterface IsError {\n  (isError: boolean, message: string): string | undefined\n}\ntype Label = string | undefined;\n\nconst error: IsError = (isError, message = '') => (isError ? message : undefined);\n\nexport const MESSAGES = {\n  required: () => `This field is required.`,\n  requiredIf: (dependentLabel: Label, label: Label) =>\n    `The ${dependentLabel} field is required since the ${label} field is filled out.`,\n  length: (min: string, max: string) =>\n    `Must be at least ${min} and no more than ${max} characters`,\n  match: (label: Label, matchingLabel: Label) => `The ${label} and ${matchingLabel} do not match.`,\n  letters: () => `Please enter letters only.`,\n  email: () => `Please enter a valid email address.`,\n  phone: () => `Please enter a valid phone number.`,\n  postal: () => `Please enter a valid postal number.`,\n  number: () => `Please enter a valid number.`,\n  alpha: () => `Please do not use special characters.`,\n  size: (min: string, max: string) => `Please enter a number between ${min} and ${max}.`,\n  oneOf: (pool: string[]) => `Please choose one of these choices: ${pool.join(', ')}`,\n};\n\nexport const required: Validator = field => error(!field.value, MESSAGES.required());\n\nexport const requiredIf: Validator = (field, dependentFieldName) =>\n  error(\n    !(!!field.value && !!field.form.fields[dependentFieldName]),\n    MESSAGES.requiredIf(field.form.fields[dependentFieldName].label, field.label),\n  );\n\nexport const length: Validator = (field: IField, min: number = 0, max: number = Infinity) =>\n  error(\n    !(!!field.value && field.value.length >= Number(min) && field.value.length <= Number(max)),\n    MESSAGES.length(min.toString(10), max.toString(10)),\n  );\n\nexport const match: Validator = (field, matchingFieldName: string) =>\n  error(\n    field.value !== field.form.fields[matchingFieldName].value,\n    MESSAGES.match(field.label, field.form.fields[matchingFieldName].label),\n  );\n\nconst LETTERS: RegExp = /^[a-zA-Z\\s]*$/;\nexport const letters: Validator = ({ value }) => error(\n  !!value && !LETTERS.test(value), MESSAGES.letters()\n);\n\nconst EMAIL: RegExp = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\nexport const email: Validator = ({ value }) =>\n  error(!!value && !EMAIL.test(value), MESSAGES.email());\n\nconst PHONE_NUMBER: RegExp = /^(\\()?[2-9]\\d{2}(-|.|\\))?\\d{3}(-|.)?\\d{4}$/;\nexport const phone: Validator = ({ value }) =>\n  error(!!value && !PHONE_NUMBER.test(value), MESSAGES.phone());\n\nconst POSTAL: RegExp = /^\\d{5}-\\d{4}|\\d{5}|[A-Z]\\d[A-Z] \\d[A-Z]\\d$/;\nexport const postal: Validator = ({ value }) =>\n  error(!!value && !POSTAL.test(value), MESSAGES.postal());\n\nconst NUMBER: RegExp = /^\\d+$/;\nexport const number: Validator = ({ value }) =>\n  error(!!value && !NUMBER.test(value), MESSAGES.number());\n\nconst ALPHA: RegExp = /^\\w+$/;\nexport const alpha: Validator = ({ value }) =>\n  error(!!value && !ALPHA.test(value), MESSAGES.alpha());\n\nexport const size: Validator = ({ value }, min: number = 0, max: number = Infinity) =>\n  error(\n    !!value && !(Number(value) >= min && Number(value) <= max),\n    MESSAGES.size(min.toString(10), max.toString(10)),\n  );\n\nexport const oneOf: Validator = ({ value }, ...pool: string[]) =>\n  error(!!value && !pool.includes(value), MESSAGES.oneOf(pool));\n","import { IField, Validators } from '../types';\nimport {\n  alpha,\n  letters,\n  email,\n  length,\n  match,\n  number,\n  oneOf,\n  phone,\n  postal,\n  required,\n  requiredIf,\n  size,\n} from './validations';\n\nexport function validate(field: IField, validators: Validators): string[] | any[] {\n  const validations = field.validation.split('|');\n  return validations\n    .map((validation: string) => {\n      // @ts-ignore\n      const [validator, argument = '']: [keyof typeof validators, string] = validation.split(':');\n      let args: any[] = [];\n      if (argument) {\n        // Handle the arguments passed in\n        args = argument.split(',');\n      }\n      if (!(validator in validators)) {\n        throw new Error(`There is no validator with the name of ${validator}`);\n      }\n      return validators[validator](field, ...args);\n    })\n    .filter(Boolean);\n}\n\nexport const validators = (additionalValidators: Validators = {}) => ({\n  required,\n  'required-if': requiredIf,\n  length,\n  letters,\n  email,\n  match,\n  number,\n  phone,\n  postal,\n  alpha,\n  size,\n  'one-of': oneOf,\n  ...additionalValidators,\n});\n","import { action, computed, observable } from 'mobx';\n\nimport { validate } from './validators';\nimport { IField, IForm, IFormSchema, Validators } from './types';\n\nexport class Field implements IField {\n  public name: string;\n\n  public label: string;\n\n  public placeholder: string;\n\n  @observable public initialValue: string;\n\n  @observable private _value: string;\n\n  @observable isTouched = false;\n\n  @observable public validation: string;\n\n  @computed\n  public get value() {\n    return this._value;\n  }\n\n  @computed\n  public get isValid(): boolean {\n    return this.errors.length === 0;\n  }\n\n  @computed\n  public get isDirty(): boolean {\n    return this.initialValue !== this.value;\n  }\n\n  @computed\n  public get errors(): string[] {\n    return validate(this, this.validators);\n  }\n\n  @computed\n  public get hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n\n  public constructor(\n    public form: IForm,\n    { name, label = '', placeholder = '', validation = '', initialValue = '' }: IFormSchema,\n    private validators: Validators,\n  ) {\n    this.name = name;\n    this.label = label;\n    this.placeholder = placeholder;\n    this.initialValue = initialValue;\n    this._value = initialValue;\n    this.validation = validation;\n  }\n\n  public set value(value: string) {\n    this._value = value;\n    this.isTouched = true;\n  }\n\n  @action('TinyMobxForm | Field | reset')\n  public reset() {\n    this._value = this.initialValue;\n    this.isTouched = false;\n  }\n}\n","import { action, computed, observable } from 'mobx';\n\nimport { Field } from './field';\nimport { Fields, IForm, IFormSchema, InitialValues, Validators } from './types';\nimport { validators } from './validators';\n\nexport class Form implements IForm {\n  @observable public fieldNames: string[] = [];\n\n  @observable.struct public fields: Fields = {};\n\n  @computed\n  public get isValid() {\n    return this.fieldNames.filter((name: string) => !this.fields[name].isValid).length === 0;\n  }\n\n  @computed\n  public get errors() {\n    return this.fieldNames.flatMap(name => this.fields[name].errors);\n  }\n\n  @computed\n  public get isDirty() {\n    return this.fieldNames.some(name => this.fields[name].isDirty);\n  }\n\n  @computed\n  public get values() {\n    return this.fieldNames.reduce(\n      (dataset, name) => ({ ...dataset, [name]: this.fields[name].value }),\n      {},\n    );\n  }\n\n  public constructor(\n    fields: IFormSchema[],\n    initialValues: InitialValues = {},\n    additionalValidators: Validators = {},\n  ) {\n    fields.forEach((props: IFormSchema) => {\n      this.fieldNames.push(props.name);\n      const initialValue = initialValues[props.name] || props.initialValue;\n      const newProps = { ...props, initialValue };\n      this.fields[newProps.name] = new Field(this, newProps, validators(additionalValidators));\n    });\n  }\n\n  @action('TinyMobxForm | showErrors')\n  public showErrors() {\n    this.fieldNames.forEach(name => {\n      this.fields[name].isTouched = true;\n    });\n  }\n\n  @action('TinyMobxForm | reset')\n  public reset() {\n    this.fieldNames.forEach(name => this.fields[name].reset());\n  }\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { TextInputField } from 'evergreen-ui';\n\nimport { Form } from '../../dist';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst { fields } = new Form(schema);\n\nfunction InstantValidation() {\n  return (\n    <div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"firstName\"\n          value={fields.firstName.value}\n          placeholder={fields.firstName.placeholder}\n          label={fields.firstName.label}\n          validationMessage={fields.firstName.isDirty && fields.firstName.hasErrors && fields.firstName.errors.join(' ')}\n          isInvalid={fields.firstName.isDirty && fields.firstName.hasErrors}\n          onChange={e => (fields.firstName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"lastName\"\n          value={fields.lastName.value}\n          placeholder={fields.lastName.placeholder}\n          label={fields.lastName.label}\n          validationMessage={fields.lastName.isDirty && fields.lastName.hasErrors && fields.lastName.errors.join(' ')}\n          isInvalid={fields.lastName.isDirty && fields.lastName.hasErrors}\n          onChange={e => (fields.lastName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"email\"\n          value={fields.email.value}\n          placeholder={fields.email.placeholder}\n          label={fields.email.label}\n          validationMessage={fields.email.isDirty && fields.email.hasErrors && fields.email.errors.join(' ')}\n          isInvalid={fields.email.isDirty && fields.email.hasErrors}\n          onChange={e => (fields.email.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"age\"\n          value={fields.age.value}\n          placeholder={fields.age.placeholder}\n          label={fields.age.label}\n          validationMessage={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n          isInvalid={fields.age.isDirty && fields.age.hasErrors}\n          onChange={e => (fields.age.value = e.currentTarget.value)}\n          error={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(InstantValidation);\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { TextInputField } from 'evergreen-ui';\n\nimport { Form } from '../../dist';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst { fields } = new Form(schema);\n\nfunction OnblurValidation() {\n  const [blurredFields, setBlurredFields] = useState([]);\n\n  return (\n    <div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"firstName\"\n          value={fields.firstName.value}\n          placeholder={fields.firstName.placeholder}\n          label={fields.firstName.label}\n          validationMessage={blurredFields.includes('firstName') && fields.firstName.hasErrors && fields.firstName.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'firstName'])}\n          isInvalid={blurredFields.includes('firstName') && fields.firstName.hasErrors}\n          onChange={e => (fields.firstName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"lastName\"\n          value={fields.lastName.value}\n          placeholder={fields.lastName.placeholder}\n          label={fields.lastName.label}\n          validationMessage={blurredFields.includes('lastName') && fields.lastName.hasErrors && fields.lastName.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'lastName'])}\n          isInvalid={blurredFields.includes('lastName') && fields.lastName.hasErrors}\n          onChange={e => (fields.lastName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"email\"\n          value={fields.email.value}\n          placeholder={fields.email.placeholder}\n          label={fields.email.label}\n          validationMessage={blurredFields.includes('email') && fields.email.hasErrors && fields.email.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'email'])}\n          isInvalid={blurredFields.includes('email') && fields.email.hasErrors}\n          onChange={e => (fields.email.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"age\"\n          value={fields.age.value}\n          placeholder={fields.age.placeholder}\n          label={fields.age.label}\n          validationMessage={blurredFields.includes('age') && fields.age.hasErrors && fields.age.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'age'])}\n          isInvalid={blurredFields.includes('age') && fields.age.hasErrors}\n          onChange={e => (fields.age.value = e.currentTarget.value)}\n          error={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(OnblurValidation);\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from 'docz'\nimport InstantValidation from './components/instant-validation'\nimport OnblurValidation from './components/onblur-validation'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"react-tiny-mobx-form\"\n    }}>{`React Tiny MobX Form`}</h1>\n    <h2 {...{\n      \"id\": \"\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"https://coveralls.io/github/dericgw/tiny-mobx-form?branch=master\"\n      }}><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/dericgw/tiny-mobx-form/badge.svg?branch=master\" /></a></h2>\n    <p>{`✌️Tiny (~2KB) tree-shakable MobX form library`}</p>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Small, less than 2KB and tree-shakable`}</li>\n      <li parentName=\"ul\">{`Written in TypeScript using MobX`}</li>\n      <li parentName=\"ul\">{`Includes popular validations`}</li>\n      <li parentName=\"ul\">{`Can add your own custom validations if needed`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p><inlineCode parentName=\"p\">{`npm i tiny-mobx-form`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add tiny-mobx-form`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"validation\"\n    }}>{`Validation`}</h2>\n    <p>{`Tiny MobX Form has the most common validations built in and also allows custom validations to be\nadded.`}</p>\n    <h3 {...{\n      \"id\": \"validators\"\n    }}>{`Validators`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`required - `}<inlineCode parentName=\"li\">{`required`}</inlineCode></li>\n      <li parentName=\"ul\">{`required if - `}<inlineCode parentName=\"li\">{`required-if:<name of field>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`required-if:last-name`}</inlineCode></li>\n      <li parentName=\"ul\">{`length (string length) - `}<inlineCode parentName=\"li\">{`length:<min>,<max>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`length:4,30`}</inlineCode></li>\n      <li parentName=\"ul\">{`match - `}<inlineCode parentName=\"li\">{`match:<name of field>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`match:password`}</inlineCode></li>\n      <li parentName=\"ul\">{`letters - `}<inlineCode parentName=\"li\">{`letters`}</inlineCode></li>\n      <li parentName=\"ul\">{`email - `}<inlineCode parentName=\"li\">{`email`}</inlineCode></li>\n      <li parentName=\"ul\">{`phone number - `}<inlineCode parentName=\"li\">{`phone`}</inlineCode></li>\n      <li parentName=\"ul\">{`postal - `}<inlineCode parentName=\"li\">{`postal`}</inlineCode></li>\n      <li parentName=\"ul\">{`number - `}<inlineCode parentName=\"li\">{`number`}</inlineCode></li>\n      <li parentName=\"ul\">{`alphanumeric - `}<inlineCode parentName=\"li\">{`alpha`}</inlineCode></li>\n      <li parentName=\"ul\">{`size (number between) - `}<inlineCode parentName=\"li\">{`size:<min>,<max>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`size:50,100`}</inlineCode></li>\n      <li parentName=\"ul\">{`one of (array list) - `}<inlineCode parentName=\"li\">{`one-of:<comma separated list>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`one-of:red,blue,green`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"custom-validators\"\n    }}>{`Custom Validators`}</h3>\n    <p>{`If you would like to add your own custom validators, then you can pass those to the `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` argument\nof the `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` constructor. You would pass them in as an object. The object key is the name of the\nvalidator and the value is the validator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const additionalValidators = {\n  'file-size': fileSizeValidator,\n};\n`}</code></pre>\n    <p>{`As an example, say we want to get the file size of a value and we want our validation to look like\nthis: `}<inlineCode parentName=\"p\">{`file-size:2`}</inlineCode>{` (that is 2KB). The validator would look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// The field is passed in so you can get any of its properties. \n// The other arguments are spread into the validator\nconst fileSizeValidator = (field, max) => {\n  if (!!field.value && field.value.size > max * 1024 /* 1,024 bytes in a KB */) {\n    return \\`The file size is too larger than \\${max}KB\\`;\n  }\n  return undefined;\n}\n`}</code></pre>\n    <p>{`Or, say we wanted a range for our file size that would look like this `}<inlineCode parentName=\"p\">{`file-size:1,4`}</inlineCode>{`. Then our\nvalidator would look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fileSizeValidator = (field, min, max) => {\n  if (!!field.value && (field.value.size < min * 1024 || field.value.size > max * 1024)) {\n    return \\`The file size must be between \\${min}KB and \\${max}KB\\`;\n  }\n  return undefined;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"instant-validation-example\"\n    }}>{`Instant Validation Example`}</h3>\n    <Playground __position={0} __code={'<InstantValidation />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      InstantValidation,\n      OnblurValidation\n    }} __codesandbox={``} mdxType=\"Playground\">\n  <InstantValidation mdxType=\"InstantValidation\" />\n    </Playground>\n    <p>{`Here is the code for the example above:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import React from 'react';\nimport { observer } from 'mobx-react';\nimport { TextInputField } from 'evergreen-ui';\n\nimport { Form } from '../../dist';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst { fields } = new Form(schema);\n\nfunction InstantValidation() {\n  return (\n    <div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"firstName\"\n          value={fields.firstName.value}\n          placeholder={fields.firstName.placeholder}\n          label={fields.firstName.label}\n          validationMessage={fields.firstName.isDirty && fields.firstName.hasErrors && fields.firstName.errors.join(' ')}\n          isInvalid={fields.firstName.isDirty && fields.firstName.hasErrors}\n          onChange={e => (fields.firstName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"lastName\"\n          value={fields.lastName.value}\n          placeholder={fields.lastName.placeholder}\n          label={fields.lastName.label}\n          validationMessage={fields.lastName.isDirty && fields.lastName.hasErrors && fields.lastName.errors.join(' ')}\n          isInvalid={fields.lastName.isDirty && fields.lastName.hasErrors}\n          onChange={e => (fields.lastName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"email\"\n          value={fields.email.value}\n          placeholder={fields.email.placeholder}\n          label={fields.email.label}\n          validationMessage={fields.email.isDirty && fields.email.hasErrors && fields.email.errors.join(' ')}\n          isInvalid={fields.email.isDirty && fields.email.hasErrors}\n          onChange={e => (fields.email.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"age\"\n          value={fields.age.value}\n          placeholder={fields.age.placeholder}\n          label={fields.age.label}\n          validationMessage={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n          isInvalid={fields.age.isDirty && fields.age.hasErrors}\n          onChange={e => (fields.age.value = e.currentTarget.value)}\n          error={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(InstantValidation);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"on-blur-validation-example\"\n    }}>{`On Blur Validation Example`}</h3>\n    <Playground __position={1} __code={'<OnblurValidation />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      InstantValidation,\n      OnblurValidation\n    }} __codesandbox={``} mdxType=\"Playground\">\n  <OnblurValidation mdxType=\"OnblurValidation\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}