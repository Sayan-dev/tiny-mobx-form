{"version":3,"sources":["/Users/deric/Code/tiny-mobx-form/example/introduction.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"mappings":"gXAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,iBAAQ,CACN,GAAM,IACL,+BAAGC,WAAW,MAAS,CACtB,KAAQ,qEACP,mBAAKC,IAAI,kBAAkBC,IAAI,uFACpC,gFACA,iBAAQ,CACN,GAAM,YADR,YAGA,sBACE,kBAAIF,WAAW,MAAf,0CACA,kBAAIA,WAAW,MAAf,oCACA,kBAAIA,WAAW,MAAf,gCACA,kBAAIA,WAAW,MAAf,kDAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,qBAAG,0BAAYA,WAAW,KAAvB,wBAAH,OAA2E,0BAAYA,WAAW,KAAvB,4BAC3E,iBAAQ,CACN,GAAM,cADR,cAGA,iIAEA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,cAAmC,0BAAYA,WAAW,MAAvB,aACnC,kBAAIA,WAAW,MAAf,iBAAsC,0BAAYA,WAAW,MAAvB,+BAAtC,MAAqH,0BAAYA,WAAW,MAAvB,0BACrH,kBAAIA,WAAW,MAAf,4BAAiD,0BAAYA,WAAW,MAAvB,sBAAjD,MAAuH,0BAAYA,WAAW,MAAvB,gBACvH,kBAAIA,WAAW,MAAf,WAAgC,0BAAYA,WAAW,MAAvB,yBAAhC,MAAyG,0BAAYA,WAAW,MAAvB,mBACzG,kBAAIA,WAAW,MAAf,aAAkC,0BAAYA,WAAW,MAAvB,YAClC,kBAAIA,WAAW,MAAf,WAAgC,0BAAYA,WAAW,MAAvB,UAChC,kBAAIA,WAAW,MAAf,kBAAuC,0BAAYA,WAAW,MAAvB,UACvC,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,WACjC,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,WACjC,kBAAIA,WAAW,MAAf,kBAAuC,0BAAYA,WAAW,MAAvB,UACvC,kBAAIA,WAAW,MAAf,2BAAgD,0BAAYA,WAAW,MAAvB,oBAAhD,MAAoH,0BAAYA,WAAW,MAAvB,gBACpH,kBAAIA,WAAW,MAAf,yBAA8C,0BAAYA,WAAW,MAAvB,iCAA9C,MAA+H,0BAAYA,WAAW,MAAvB,2BAEjI,iBAAQ,CACN,GAAM,qBADR,qBAGA,4GAA2F,0BAAYA,WAAW,KAAvB,WAA3F,qBACK,0BAAYA,WAAW,KAAvB,QADL,mIAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4EAML,kIACI,0BAAYA,WAAW,KAAvB,eADJ,uDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mVAWL,8FAA6E,0BAAYA,WAAW,KAAvB,iBAA7E,+CAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oP,8KAaTJ,EAAWO,gBAAiB","file":"static/js/example-introduction.17d02d09.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-tiny-mobx-form\"\n    }}>{`React Tiny MobX Form`}</h1>\n    <h2 {...{\n      \"id\": \"\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"https://coveralls.io/github/dericgw/tiny-mobx-form?branch=master\"\n      }}><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/dericgw/tiny-mobx-form/badge.svg?branch=master\" /></a></h2>\n    <p>{`✌️Tiny (~2KB) tree-shakable MobX form library`}</p>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Small, less than 2KB and tree-shakable`}</li>\n      <li parentName=\"ul\">{`Written in TypeScript using MobX`}</li>\n      <li parentName=\"ul\">{`Includes popular validations`}</li>\n      <li parentName=\"ul\">{`Can add your own custom validations if needed`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p><inlineCode parentName=\"p\">{`npm i tiny-mobx-form`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add tiny-mobx-form`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"validation\"\n    }}>{`Validation`}</h2>\n    <p>{`Tiny MobX Form has the most common validations built in and also allows custom validations to be\nadded.`}</p>\n    <h3 {...{\n      \"id\": \"validators\"\n    }}>{`Validators`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`required - `}<inlineCode parentName=\"li\">{`required`}</inlineCode></li>\n      <li parentName=\"ul\">{`required if - `}<inlineCode parentName=\"li\">{`required-if:<name of field>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`required-if:last-name`}</inlineCode></li>\n      <li parentName=\"ul\">{`length (string length) - `}<inlineCode parentName=\"li\">{`length:<min>,<max>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`length:4,30`}</inlineCode></li>\n      <li parentName=\"ul\">{`match - `}<inlineCode parentName=\"li\">{`match:<name of field>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`match:password`}</inlineCode></li>\n      <li parentName=\"ul\">{`letters - `}<inlineCode parentName=\"li\">{`letters`}</inlineCode></li>\n      <li parentName=\"ul\">{`email - `}<inlineCode parentName=\"li\">{`email`}</inlineCode></li>\n      <li parentName=\"ul\">{`phone number - `}<inlineCode parentName=\"li\">{`phone`}</inlineCode></li>\n      <li parentName=\"ul\">{`postal - `}<inlineCode parentName=\"li\">{`postal`}</inlineCode></li>\n      <li parentName=\"ul\">{`number - `}<inlineCode parentName=\"li\">{`number`}</inlineCode></li>\n      <li parentName=\"ul\">{`alphanumeric - `}<inlineCode parentName=\"li\">{`alpha`}</inlineCode></li>\n      <li parentName=\"ul\">{`size (number between) - `}<inlineCode parentName=\"li\">{`size:<min>,<max>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`size:50,100`}</inlineCode></li>\n      <li parentName=\"ul\">{`one of (array list) - `}<inlineCode parentName=\"li\">{`one-of:<comma separated list>`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`one-of:red,blue,green`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"custom-validators\"\n    }}>{`Custom Validators`}</h3>\n    <p>{`If you would like to add your own custom validators, then you can pass those to the `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` argument\nof the `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` constructor. You would pass them in as an object. The object key is the name of the\nvalidator and the value is the validator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const additionalValidators = {\n  'file-size': fileSizeValidator,\n};\n`}</code></pre>\n    <p>{`As an example, say we want to get the file size of a value and we want our validation to look like\nthis: `}<inlineCode parentName=\"p\">{`file-size:2`}</inlineCode>{` (that is 2KB). The validator would look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// The field is passed in so you can get any of its properties. \n// The other arguments are spread into the validator\nconst fileSizeValidator = (field, max) => {\n  if (!!field.value && field.value.size > max * 1024 /* 1,024 bytes in a KB */) {\n    return \\`The file size is too larger than \\${max}KB\\`;\n  }\n  return undefined;\n}\n`}</code></pre>\n    <p>{`Or, say we wanted a range for our file size that would look like this `}<inlineCode parentName=\"p\">{`file-size:1,4`}</inlineCode>{`. Then our\nvalidator would look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fileSizeValidator = (field, min, max) => {\n  if (!!field.value && (field.value.size < min * 1024 || field.value.size > max * 1024)) {\n    return \\`The file size must be between \\${min}KB and \\${max}KB\\`;\n  }\n  return undefined;\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}